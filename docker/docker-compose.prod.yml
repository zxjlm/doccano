version: "3.7"
services:

  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    image: doccano_backend:prod
    ports:
      - "9003:8000"
    restart: always
    volumes:
      - static_volume:/backend/staticfiles
      - media:/backend/media
    entrypoint: [ "/opt/bin/prod-django.sh" ]
    environment:
      ADMIN_USERNAME: "${ADMIN_USERNAME}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq"
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      ALLOW_SIGNUP: "False"
      DEBUG: "False"
      DJANGO_SETTINGS_MODULE: "config.settings.development"
      # CSRF_TRUSTED_ORIGINS:
      #   - "http://47.103.76.95:9000"
    depends_on:
      - postgres
    networks:
      - network-backend
      - network-frontend

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    image: doccano_celery:prod
    restart: always
    volumes:
      - media:/backend/media
    entrypoint: ["/opt/bin/prod-celery.sh"]
    environment:
      PYTHONUNBUFFERED: "1"
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq"
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      DJANGO_SETTINGS_MODULE: "config.settings.production"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - network-backend

  rabbitmq:
    image: rabbitmq:3.8-alpine
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    ports:
      - 5672:5672
    networks:
      - network-backend

  nginx:
    build:
      context: ..
      dockerfile: docker/Dockerfile.nginx
    restart: always
    environment:
      API_URL: "http://backend:8000"
      GOOGLE_TRACKING_ID: ""
    volumes:
      - static_volume:/static
      - media:/media
    ports:
      - "9004:8080"
    depends_on:
      - backend
    networks:
      - network-frontend

  postgres:
    image: postgres:13.3-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    networks:
      - network-backend

volumes:
  postgres_data:
  static_volume:
  media:

networks:
  network-backend:
  network-frontend:
